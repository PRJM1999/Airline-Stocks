name: CI/CD Workflow

on:
  push:
    branches:
      - main # Assuming you want to deploy on pushes to the main branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    # # Build and test React app
    # - name: Build Frontend React App Test Image
    #   run: docker build --target tester --platform linux/amd64 -t pmontgomery27/docker-react-i:test -f Dockerfile .
    
    # - name: Run Frontend React App Tests
    #   run: docker run pmontgomery27/docker-react-i:test npm run test

    # - name: Build and Push Frontend React App Production Image
    #   run: |
    #    docker build --target production-ready --platform linux/amd64 -t pmontgomery27/docker-react-i:latest -f Dockerfile .
    #    docker push pmontgomery27/docker-react-i:latest

    # # Build and test Python server
    # - name: Build Python Server Test Image
    #   run: docker build --target tester --platform linux/amd64 -t pmontgomery27/docker-python-server:test -f server/Dockerfile server

    # - name: Run Python Server Tests
    #   run: docker run pmontgomery27/docker-python-server:test pytest

    # - name: Build and Push Python Server Production Image
    #   run: |
    #    docker build --target production-ready --platform linux/amd64 -t pmontgomery27/python-backend-docker:latest -f server/Dockerfile server
    #    docker push pmontgomery27/python-backend-docker:latest

    # Build and push cpp-server
    - name: Build cpp-server Image
      run: docker build --platform linux/amd64 -t pmontgomery27/cpp-server:latest -f cpp-server/Dockerfile cpp-server

    - name: Push cpp-server Image
      run: docker push pmontgomery27/cpp-server:latest

    # Deploy to EC2
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOST: ec2-18-168-204-211.eu-west-2.compute.amazonaws.com
        USER: ubuntu
      run: |
        # Decode the SSH key
        echo "$PRIVATE_KEY" | base64 -d > private_key.pem
        chmod 600 private_key.pem

        # Copy docker-compose.yml to EC2 instance
        scp -o StrictHostKeyChecking=no -i private_key.pem docker-compose.yml $USER@$HOST:~/docker-compose.yml

        # SSH and deploy
        ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'ENDSSH'
          
          docker-compose pull
          docker-compose down
          docker-compose up -d

          # Remove dangling images
          docker image prune -f

        ENDSSH
